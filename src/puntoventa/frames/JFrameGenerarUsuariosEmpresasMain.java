/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package puntoventa.frames;

import java.awt.Font;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import puntodeventa.sql.AuthUser;
import puntodeventa.sql.PuntoventaEmpresa;
import puntodeventa.sql.PuntoventaEmpresaUsuario;
import puntodeventa.sql.PuntoventaEmpresaUsuario_;
import puntodeventa.sql.PuntoventaUsuario;

/**
 *
 * @author asus
 */
public class JFrameGenerarUsuariosEmpresasMain extends javax.swing.JFrame {

    /**
     * Creates new form JDialogGenerarUsuariosEmpresasMain
     */
    public JFrameGenerarUsuariosEmpresasMain() {

        initComponents();
        inicializar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonNuevoUsuario = new javax.swing.JButton();
        jTextFieldUsuario = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableUsuarios = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableEmpresas = new javax.swing.JTable();
        jTextFieldEmpresa = new javax.swing.JTextField();
        jButtonNuevoEmpresas = new javax.swing.JButton();
        jButtonAsignarEmpresa = new javax.swing.JButton();
        jTextFieldEmpresasAsignadas = new javax.swing.JTextField();
        jButtonCerrar = new javax.swing.JButton();
        jButtonEditarUsuario = new javax.swing.JButton();
        jButtonEditarEmpresa = new javax.swing.JButton();
        jButtonEliminarUsuario = new javax.swing.JButton();
        jButtonEliminarEmpresa = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableEmpresasDisponibles = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableEmpresasSeleccionadas = new javax.swing.JTable();
        jButtonQuitarEmpresa = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MODULO DE USUARIOS Y EMPRESAS");
        setResizable(false);

        jButtonNuevoUsuario.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jButtonNuevoUsuario.setText("NUEVO");
        jButtonNuevoUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevoUsuarioActionPerformed(evt);
            }
        });

        jTextFieldUsuario.setEditable(false);
        jTextFieldUsuario.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jTextFieldUsuario.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldUsuario.setText("USUARIOS");

        jTableUsuarios.setAutoCreateRowSorter(true);
        jTableUsuarios.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jTableUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "USERNAME", "NOMBRE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableUsuarios.setRowHeight(30);
        jTableUsuarios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableUsuarios.setShowHorizontalLines(false);
        jTableUsuarios.setShowVerticalLines(false);
        jScrollPane2.setViewportView(jTableUsuarios);

        jTableEmpresas.setAutoCreateRowSorter(true);
        jTableEmpresas.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jTableEmpresas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "EMPRESA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableEmpresas.setRowHeight(30);
        jTableEmpresas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableEmpresas.setShowHorizontalLines(false);
        jTableEmpresas.setShowVerticalLines(false);
        jScrollPane3.setViewportView(jTableEmpresas);

        jTextFieldEmpresa.setEditable(false);
        jTextFieldEmpresa.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jTextFieldEmpresa.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldEmpresa.setText("EMPRESAS");

        jButtonNuevoEmpresas.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jButtonNuevoEmpresas.setText("NUEVO");
        jButtonNuevoEmpresas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevoEmpresasActionPerformed(evt);
            }
        });

        jButtonAsignarEmpresa.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jButtonAsignarEmpresa.setText("ASIGNAR >>");
        jButtonAsignarEmpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAsignarEmpresaActionPerformed(evt);
            }
        });

        jTextFieldEmpresasAsignadas.setEditable(false);
        jTextFieldEmpresasAsignadas.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jTextFieldEmpresasAsignadas.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldEmpresasAsignadas.setText("EMPRESAS ASIGNADAS");

        jButtonCerrar.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jButtonCerrar.setText("SALIR");
        jButtonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCerrarActionPerformed(evt);
            }
        });

        jButtonEditarUsuario.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jButtonEditarUsuario.setText("EDITAR");
        jButtonEditarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarUsuarioActionPerformed(evt);
            }
        });

        jButtonEditarEmpresa.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jButtonEditarEmpresa.setText("EDITAR");
        jButtonEditarEmpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarEmpresaActionPerformed(evt);
            }
        });

        jButtonEliminarUsuario.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jButtonEliminarUsuario.setText("ELIMINAR");
        jButtonEliminarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarUsuarioActionPerformed(evt);
            }
        });

        jButtonEliminarEmpresa.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jButtonEliminarEmpresa.setText("ELIMINAR");
        jButtonEliminarEmpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarEmpresaActionPerformed(evt);
            }
        });

        jTableEmpresasDisponibles.setAutoCreateRowSorter(true);
        jTableEmpresasDisponibles.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jTableEmpresasDisponibles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "DISPONIBLES"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableEmpresasDisponibles.setRowHeight(30);
        jTableEmpresasDisponibles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableEmpresasDisponibles.setShowHorizontalLines(false);
        jTableEmpresasDisponibles.setShowVerticalLines(false);
        jScrollPane5.setViewportView(jTableEmpresasDisponibles);

        jTableEmpresasSeleccionadas.setAutoCreateRowSorter(true);
        jTableEmpresasSeleccionadas.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jTableEmpresasSeleccionadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "SELECCIONADAS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableEmpresasSeleccionadas.setRowHeight(30);
        jTableEmpresasSeleccionadas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableEmpresasSeleccionadas.setShowHorizontalLines(false);
        jTableEmpresasSeleccionadas.setShowVerticalLines(false);
        jScrollPane6.setViewportView(jTableEmpresasSeleccionadas);

        jButtonQuitarEmpresa.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jButtonQuitarEmpresa.setText("<< QUITAR");
        jButtonQuitarEmpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitarEmpresaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonEliminarUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEditarUsuario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(jButtonNuevoUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldEmpresa)
                    .addComponent(jButtonNuevoEmpresas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(jButtonEditarEmpresa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEliminarEmpresa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCerrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldEmpresasAsignadas, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jButtonAsignarEmpresa, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jButtonQuitarEmpresa, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldEmpresa, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(jTextFieldEmpresasAsignadas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jButtonAsignarEmpresa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonQuitarEmpresa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonNuevoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonNuevoEmpresas, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                        .addComponent(jButtonCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonEditarUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(jButtonEditarEmpresa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonEliminarUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(jButtonEliminarEmpresa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNuevoUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevoUsuarioActionPerformed

        JDialogNuevoUsuario dialogNuevoUsuario = new JDialogNuevoUsuario(this, true);
        dialogNuevoUsuario.setLocationRelativeTo(this);
        dialogNuevoUsuario.setEm(em);
        dialogNuevoUsuario.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
        dialogNuevoUsuario.setVisible(true);

        if (!dialogNuevoUsuario.isCancelado()) {

            eliminarTodasFilasTabla(jTableUsuarios);
            mostrarUsuariosEnTabla(jTableUsuarios, cargarTodosUsuariosSQL());
        }
    }//GEN-LAST:event_jButtonNuevoUsuarioActionPerformed

    private void jButtonNuevoEmpresasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevoEmpresasActionPerformed

        JDialogNuevaEmpresa dialogNuevaEmpresa = new JDialogNuevaEmpresa(this, true);
        dialogNuevaEmpresa.setLocationRelativeTo(this);
        dialogNuevaEmpresa.setEm(em);
        dialogNuevaEmpresa.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
        dialogNuevaEmpresa.setVisible(true);

        if (!dialogNuevaEmpresa.isCancelado()) {

            eliminarTodasFilasTabla(jTableEmpresas);
            mostrarEmpresasEnTabla(jTableEmpresas, selectTodasEmpresasSQL());
        }
    }//GEN-LAST:event_jButtonNuevoEmpresasActionPerformed

    private void jButtonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCerrarActionPerformed

        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_jButtonCerrarActionPerformed

    private void jButtonEditarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarUsuarioActionPerformed

        Object objeto = obtenerObjetoSeleccionado(jTableUsuarios, 0);

        if (objeto != null) {
            JDialogNuevoUsuario dialogEditarUsuario = new JDialogNuevoUsuario(this, true);
            dialogEditarUsuario.setModoEdicion(true);
            dialogEditarUsuario.setUsuario((PuntoventaUsuario) objeto);
            dialogEditarUsuario.setLocationRelativeTo(this);
            dialogEditarUsuario.setEm(em);
            dialogEditarUsuario.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
            dialogEditarUsuario.setVisible(true);

            if (!dialogEditarUsuario.isCancelado()) {

                eliminarTodasFilasTabla(jTableUsuarios);
                mostrarUsuariosEnTabla(jTableUsuarios, cargarTodosUsuariosSQL());
                seleccionarPrimerObjetoTabla(jTableUsuarios);
            }
        } else {

            mensajeValidacionSeleccion(this);
        }
    }//GEN-LAST:event_jButtonEditarUsuarioActionPerformed

    private void jButtonEliminarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarUsuarioActionPerformed

        Object objeto = obtenerObjetoSeleccionado(jTableUsuarios, 0);

        if (objeto != null) {
            int respuesta = JOptionPane.showConfirmDialog(
                    this,
                    "¿Desea continuar con la eliminación de este usuario? "
                    + "No se podrán revertir los cambios una vez confirmado",
                    "Confirmar",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE
            );

            if (respuesta == JOptionPane.YES_OPTION) {

                boolean seElimino = eliminarUsuario((PuntoventaUsuario) objeto);

                if (seElimino) {

                    eliminarTodasFilasTabla(jTableUsuarios);
                    mostrarUsuariosEnTabla(jTableUsuarios, cargarTodosUsuariosSQL());
                }
            }
        } else {

            mensajeValidacionSeleccion(this);
        }
    }//GEN-LAST:event_jButtonEliminarUsuarioActionPerformed

    private void jButtonEditarEmpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarEmpresaActionPerformed

        Object objeto = obtenerObjetoSeleccionado(jTableEmpresas, 0);

        if (objeto != null) {
            JDialogNuevaEmpresa dialogEditarEmpresa = new JDialogNuevaEmpresa(this, true);
            dialogEditarEmpresa.setModoEdicion(true);
            dialogEditarEmpresa.setEmpresa((PuntoventaEmpresa) objeto);
            dialogEditarEmpresa.setLocationRelativeTo(this);
            dialogEditarEmpresa.setEm(em);
            dialogEditarEmpresa.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
            dialogEditarEmpresa.setVisible(true);

            if (!dialogEditarEmpresa.isCancelado()) {

                eliminarTodasFilasTabla(jTableEmpresas);
                mostrarEmpresasEnTabla(jTableEmpresas, selectTodasEmpresasSQL());
            }
        } else {

            mensajeValidacionSeleccion(this);
        }
    }//GEN-LAST:event_jButtonEditarEmpresaActionPerformed

    private void jButtonEliminarEmpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarEmpresaActionPerformed

        Object objeto = obtenerObjetoSeleccionado(jTableEmpresas, 0);

        if (objeto != null) {
            int respuesta = JOptionPane.showConfirmDialog(
                    this,
                    "¿Desea continuar con la eliminación de esta empresa? "
                    + "No se podrán revertir los cambios una vez que confirme",
                    "Confirmar",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE
            );

            if (respuesta == JOptionPane.YES_OPTION) {

                boolean seElimino = eliminarEmpresa((PuntoventaEmpresa) objeto);

                if (seElimino) {

                    eliminarTodasFilasTabla(jTableEmpresas);
                    mostrarEmpresasEnTabla(jTableEmpresas, selectTodasEmpresasSQL());
                }
            }
        } else {

            mensajeValidacionSeleccion(this);
        }
    }//GEN-LAST:event_jButtonEliminarEmpresaActionPerformed

    private void jButtonAsignarEmpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAsignarEmpresaActionPerformed

        Object objetoUsuario = obtenerObjetoSeleccionado(jTableUsuarios, 0);
        Object objetoEmpresa = obtenerObjetoSeleccionado(jTableEmpresasDisponibles, 0);

        if (objetoUsuario != null & objetoEmpresa != null) {
            int respuesta = JOptionPane.showConfirmDialog(
                    this,
                    String.format(
                            "¿Desea asignar la empresa %s al usuario %s?",
                            objetoEmpresa,
                            objetoUsuario),
                    "Confirmar",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE
            );

            if (respuesta == JOptionPane.YES_OPTION) {

                boolean exitoso = nuevaEmpresaUsuario((PuntoventaEmpresa) objetoEmpresa, (PuntoventaUsuario) objetoUsuario);

                if (exitoso) {

                    eliminarTodasFilasTabla(jTableEmpresasDisponibles);
                    eliminarTodasFilasTabla(jTableEmpresasSeleccionadas);
                    mostrarEmpresasEnTabla(
                            jTableEmpresasDisponibles,
                            selectEmpresasUsuarioDisponiblesSQL(
                                    (PuntoventaUsuario) objetoUsuario));
                    mostrarUsuarioEmpresasEnTabla(
                            jTableEmpresasSeleccionadas,
                            selectEmpresasUsuarioSeleccionadosSQL(
                                    (PuntoventaUsuario) objetoUsuario));
                }
            }
        } else {

            mensajeValidacionSeleccion(this);
        }
    }//GEN-LAST:event_jButtonAsignarEmpresaActionPerformed

    private void jButtonQuitarEmpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuitarEmpresaActionPerformed

        Object objetoUsuario = obtenerObjetoSeleccionado(jTableUsuarios, 0);
        Object objetoEmpresa = obtenerObjetoSeleccionado(jTableEmpresasSeleccionadas, 0);

        if (objetoUsuario != null & objetoEmpresa != null) {
            int respuesta = JOptionPane.showConfirmDialog(
                    this,
                    String.format(
                            "¿Está seguro que desea eliminar la empresa %s de "
                            + "la lista asociada al usuario?",
                            objetoEmpresa),
                    "Confirmar",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE
            );

            if (respuesta == JOptionPane.YES_OPTION) {
                
                PuntoventaEmpresaUsuario empresaUsuario = 
                        selectEmpresaUsuarioSQL(
                                (PuntoventaEmpresa) objetoEmpresa,
                                (PuntoventaUsuario) objetoUsuario);

                boolean exitoso = eliminarEmpresaUsuario(empresaUsuario);

                if (exitoso) {

                    eliminarTodasFilasTabla(jTableEmpresasDisponibles);
                    eliminarTodasFilasTabla(jTableEmpresasSeleccionadas);
                    mostrarEmpresasEnTabla(
                            jTableEmpresasDisponibles,
                            selectEmpresasUsuarioDisponiblesSQL(
                                    (PuntoventaUsuario) objetoUsuario));
                    mostrarUsuarioEmpresasEnTabla(
                            jTableEmpresasSeleccionadas,
                            selectEmpresasUsuarioSeleccionadosSQL(
                                    (PuntoventaUsuario) objetoUsuario));
                }
            }
        } else {

            mensajeValidacionSeleccion(this);
        }
    }//GEN-LAST:event_jButtonQuitarEmpresaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameGenerarUsuariosEmpresasMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameGenerarUsuariosEmpresasMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameGenerarUsuariosEmpresasMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameGenerarUsuariosEmpresasMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JFrameGenerarUsuariosEmpresasMain dialog = new JFrameGenerarUsuariosEmpresasMain();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAsignarEmpresa;
    private javax.swing.JButton jButtonCerrar;
    private javax.swing.JButton jButtonEditarEmpresa;
    private javax.swing.JButton jButtonEditarUsuario;
    private javax.swing.JButton jButtonEliminarEmpresa;
    private javax.swing.JButton jButtonEliminarUsuario;
    private javax.swing.JButton jButtonNuevoEmpresas;
    private javax.swing.JButton jButtonNuevoUsuario;
    private javax.swing.JButton jButtonQuitarEmpresa;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTableEmpresas;
    private javax.swing.JTable jTableEmpresasDisponibles;
    private javax.swing.JTable jTableEmpresasSeleccionadas;
    private javax.swing.JTable jTableUsuarios;
    private javax.swing.JTextField jTextFieldEmpresa;
    private javax.swing.JTextField jTextFieldEmpresasAsignadas;
    private javax.swing.JTextField jTextFieldUsuario;
    // End of variables declaration//GEN-END:variables

    private EntityManager em;
    private EntityManagerFactory emf;

    private void inicializar() {

        // diseño
        centrarVentana(this);
        eliminarTodasFilasTabla(jTableEmpresas);
        eliminarTodasFilasTabla(jTableUsuarios);
        Font fuente = new Font("Arial", Font.PLAIN, 15);
        cambiarFuenteTabla(jTableEmpresas, fuente);
        cambiarFuenteTabla(jTableUsuarios, fuente);
        cambiarFuenteTabla(jTableEmpresasDisponibles, fuente);
        cambiarFuenteTabla(jTableEmpresasSeleccionadas, fuente);

        // JPA
        cargarJPA();
        mostrarEmpresasEnTabla(jTableEmpresas, selectTodasEmpresasSQL());
        mostrarUsuariosEnTabla(jTableUsuarios, cargarTodosUsuariosSQL());

        // Registra evento y lo implementa
        valueChangedActionPerformedMostrarEmpresasUsuario();
    }

    private void cargarJPA() {

        String mensajeError = "";

        try {
            emf = Persistence.createEntityManagerFactory("PuntoDeVentaPU");
            em = emf.createEntityManager();
        } catch (Exception e) {

            mensajeError = "No es posible establecer conexión con el servidor. El mensaje de error es: \n\n" + e.getMessage();
        }

        if (mensajeError.equals("")) {

            JOptionPane.showMessageDialog(this, "Bienvenido s su punto de venta");
        } else {

            JOptionPane.showMessageDialog(this, mensajeError);
            this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        }
    }

    private void eliminarTodasFilasTabla(JTable tabla) {

        DefaultTableModel dm = (DefaultTableModel) tabla.getModel();
        int rowCount = dm.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }
    }

    private List<PuntoventaUsuario> cargarTodosUsuariosSQL() {

        List<PuntoventaUsuario> listaUsuarios;
        TypedQuery<PuntoventaUsuario> typedQuery;
        typedQuery = em.createNamedQuery(
                "PuntoventaUsuario.findAll", PuntoventaUsuario.class);
        listaUsuarios = typedQuery.getResultList();
        return listaUsuarios;
    }

    private List<PuntoventaEmpresa> selectTodasEmpresasSQL() {

        List<PuntoventaEmpresa> listaEmpresas;
        TypedQuery<PuntoventaEmpresa> typedQuery;
        typedQuery = em.createNamedQuery(
                "PuntoventaEmpresa.findAll", PuntoventaEmpresa.class);
        listaEmpresas = typedQuery.getResultList();
        return listaEmpresas;
    }

    private List<PuntoventaEmpresaUsuario> selectEmpresasUsuarioSeleccionadosSQL(PuntoventaUsuario usuario) {

        CriteriaBuilder cb = em.getCriteriaBuilder();

        CriteriaQuery<PuntoventaEmpresaUsuario> cq = cb.createQuery(PuntoventaEmpresaUsuario.class);
        Root<PuntoventaEmpresaUsuario> empresasUsuario = cq.from(PuntoventaEmpresaUsuario.class);

        cq.where(cb.equal(empresasUsuario.get(PuntoventaEmpresaUsuario_.idUsuario), usuario));
        cq.select(empresasUsuario);

        TypedQuery<PuntoventaEmpresaUsuario> q = em.createQuery(cq);
        List<PuntoventaEmpresaUsuario> listaItems = q.getResultList();
        return listaItems;
    }

    private List<PuntoventaEmpresa> selectEmpresasUsuarioDisponiblesSQL(PuntoventaUsuario usuario) {

        CriteriaBuilder cb = em.getCriteriaBuilder();

        CriteriaQuery<PuntoventaEmpresa> cq = cb.createQuery(PuntoventaEmpresa.class);
        Root<PuntoventaEmpresa> empresas = cq.from(PuntoventaEmpresa.class);

        List<PuntoventaEmpresaUsuario> empresasUsuario = selectEmpresasUsuarioSeleccionadosSQL(usuario);
        List<PuntoventaEmpresa> empresasUsuarioSolo = empresasUsuariosAEmpresas(empresasUsuario);

        if (empresasUsuarioSolo.size() > 0) {
            cq.where(
                    empresas.in(empresasUsuarioSolo).not()
            );
        } else {

            System.out.println("Sin empresas asociadas");
        }
        cq.select(empresas);

        TypedQuery<PuntoventaEmpresa> q = em.createQuery(cq);
        List<PuntoventaEmpresa> listaEmpresas = q.getResultList();

        return listaEmpresas;
    }

    private PuntoventaEmpresaUsuario selectEmpresaUsuarioSQL(PuntoventaEmpresa empresa,PuntoventaUsuario usuario) {

        CriteriaBuilder cb = em.getCriteriaBuilder();

        CriteriaQuery<PuntoventaEmpresaUsuario> cq = cb.createQuery(PuntoventaEmpresaUsuario.class);
        Root<PuntoventaEmpresaUsuario> empresasUsuario = cq.from(PuntoventaEmpresaUsuario.class);

        cq.where(
                cb.and(
                        cb.equal(empresasUsuario.get(PuntoventaEmpresaUsuario_.idUsuario), usuario),
                        cb.equal(empresasUsuario.get(PuntoventaEmpresaUsuario_.idEmpresa), empresa)
                )
        );

        cq.select(empresasUsuario);

        TypedQuery<PuntoventaEmpresaUsuario> q = em.createQuery(cq);
        List<PuntoventaEmpresaUsuario> listaEmpresas = q.getResultList();

        return listaEmpresas.get(0);
    }

    private List<PuntoventaEmpresa> empresasUsuariosAEmpresas(List<PuntoventaEmpresaUsuario> empresasUsuario) {

        List<PuntoventaEmpresa> empresas = new ArrayList<>();

        for (PuntoventaEmpresaUsuario empresaUsuario : empresasUsuario) {

            empresas.add(empresaUsuario.getIdEmpresa());
        }

        return empresas;
    }

    private void mostrarUsuariosEnTabla(JTable tabla, List<PuntoventaUsuario> usuarios) {

        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();

        for (PuntoventaUsuario usuario : usuarios) {
            modelo.addRow(new Object[]{
                usuario,
                String.format("%s %s", usuario.getIdAuthUser().getFirstName(),
                usuario.getIdAuthUser().getLastName())
            });
        }
    }

    private void mostrarEmpresasEnTabla(JTable tabla, List<PuntoventaEmpresa> empresas) {

        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();

        for (PuntoventaEmpresa empresa : empresas) {
            modelo.addRow(new Object[]{
                empresa
            });
        }
    }

    private void mostrarUsuarioEmpresasEnTabla(JTable tabla, List<PuntoventaEmpresaUsuario> empresasUsuario) {

        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();

        for (PuntoventaEmpresaUsuario empresaUsuario : empresasUsuario) {
            modelo.addRow(new Object[]{
                empresaUsuario.getIdEmpresa()

            });
        }
    }

    private void mensajeValidacionSeleccion(JFrame frame) {

        JLabel label = new JLabel("Debe seleccionar un objeto de la lista.");
        label.setFont(new Font("Arial", Font.PLAIN, 15));
        JOptionPane.showMessageDialog(frame, label, "Mensaje de validación", JOptionPane.INFORMATION_MESSAGE);
    }

    private void cambiarFuenteTabla(JTable tabla, Font fuente) {

        JTableHeader header = tabla.getTableHeader();
        header.setFont(fuente);
    }

    public void centrarVentana(JFrame ventana) {

        ventana.setLocationRelativeTo(null);
    }

    private void seleccionarPrimerObjetoTabla(JTable tabla) {

        if (tabla.getRowCount() > 0) {
            tabla.setRowSelectionInterval(0, 0);
        }
    }

    private Object obtenerObjetoSeleccionado(JTable tabla, int column) {

        int idSelectedRow = -100;
        Object objectoSeleccionado = null;

        try {

            idSelectedRow = tabla.getSelectedRow();
            objectoSeleccionado = tabla.getValueAt(idSelectedRow, column);

        } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
            System.out.println("Debe seleccionar un objeto de la lista: " + idSelectedRow);
        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {
            System.out.println("Debe seleccionar un objeto de la lista: " + idSelectedRow);
        }
        return objectoSeleccionado;
    }

    private boolean eliminarUsuario(PuntoventaUsuario puntoventaUsuario) {

        try {
            em.getTransaction().begin();
            AuthUser authUser = puntoventaUsuario.getIdAuthUser();
            em.remove(puntoventaUsuario);
            em.remove(authUser);
            em.getTransaction().commit();
            return true;
        } catch (Exception exception) {

            try {
                em.getTransaction().rollback();
            } catch (Exception exception1) {
                System.out.println("No es posible hacer rollback en este punto");
            }

            System.out.println(exception);

            JOptionPane.showMessageDialog(
                    this,
                    "Sucedió un error y no fue posible eliminar el usuario, "
                    + "intente nuevamente por favor.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);

            return false;
        }
    }

    private boolean eliminarEmpresa(PuntoventaEmpresa puntoventaEmpresa) {

        try {
            em.getTransaction().begin();
            em.remove(puntoventaEmpresa);
            em.getTransaction().commit();
            return true;
        } catch (Exception exception) {

            try {
                em.getTransaction().rollback();
            } catch (Exception exception1) {
                System.out.println("No es posible hacer rollback en este punto");
            }

            System.out.println(exception);

            JOptionPane.showMessageDialog(
                    this,
                    "Sucedió un error y no fue posible eliminar la empresa, "
                    + "intente nuevamente por favor.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);

            return false;
        }
    }

    private boolean nuevaEmpresaUsuario(PuntoventaEmpresa empresa, PuntoventaUsuario usuario) {

        try {
            em.getTransaction().begin();

            // Aqui las transacciones
            PuntoventaEmpresaUsuario empresaUsuario = new PuntoventaEmpresaUsuario();
            empresaUsuario.setIdEmpresa(empresa);
            empresaUsuario.setIdUsuario(usuario);

            em.persist(empresaUsuario);
            em.getTransaction().commit();

            return true;
        } catch (Exception exception) {

            try {
                em.getTransaction().rollback();
            } catch (Exception exception1) {
                System.out.println("No es posible hacer rollback en este punto");
            }

            System.out.println(exception);

            JOptionPane.showMessageDialog(
                    this,
                    "Sucedió un error y no fue posible asociar la empresa, "
                    + "intente nuevamente por favor.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);

            return false;
        }
    }

    private boolean eliminarEmpresaUsuario(PuntoventaEmpresaUsuario empresaUsuario) {

        try {
            em.getTransaction().begin();

            // Aqui las transacciones
            em.remove(empresaUsuario);
            em.getTransaction().commit();

            return true;
        } catch (Exception exception) {

            try {
                em.getTransaction().rollback();
            } catch (Exception exception1) {
                System.out.println("No es posible hacer rollback en este punto");
            }

            System.out.println(exception);

            JOptionPane.showMessageDialog(
                    this,
                    "Sucedió un error y no fue posible eliminar la empresa, "
                    + "intente nuevamente por favor.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);

            return false;
        }
    }

    private void valueChangedActionPerformedMostrarEmpresasUsuario() {

        ListSelectionModel selectionModel = jTableUsuarios.getSelectionModel();
        selectionModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {

                if (event.getSource() == jTableUsuarios.getSelectionModel()) {

                    Object objeto = obtenerObjetoSeleccionado(jTableUsuarios, 0);

                    eliminarTodasFilasTabla(jTableEmpresasSeleccionadas);
                    eliminarTodasFilasTabla(jTableEmpresasDisponibles);
                    mostrarUsuarioEmpresasEnTabla(
                            jTableEmpresasSeleccionadas,
                            selectEmpresasUsuarioSeleccionadosSQL(
                                    (PuntoventaUsuario) objeto));
                    mostrarEmpresasEnTabla(
                            jTableEmpresasDisponibles,
                            selectEmpresasUsuarioDisponiblesSQL(
                                    (PuntoventaUsuario) objeto));

                }
            }
        });
    }

}
