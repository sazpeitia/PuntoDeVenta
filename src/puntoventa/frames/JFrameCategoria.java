package puntoventa.frames;

import java.awt.Font;
import java.awt.event.WindowEvent;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import puntodeventa.sql.PuntoventaCategoria;
import puntodeventa.sql.PuntoventaCategoria_;
import puntodeventa.sql.PuntoventaEmpresa;

/**
 *
 * @author vladimirah
 */
public class JFrameCategoria extends javax.swing.JFrame {

    /**
     * Creates new form JFrameCategoria
     */
    
    

    public JFrameCategoria() {

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        catagoriaJTable = new javax.swing.JTable();
        addRowButton = new javax.swing.JButton();
        saveCategoryButton = new javax.swing.JButton();
        eliminarjButton = new javax.swing.JButton();

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Subcategoria");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CONTROL CATEGORIAS");
        setResizable(false);

        closeButton.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        closeButton.setText("CERRAR");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("CONTROL CATEGORIAS");

        catagoriaJTable.setAutoCreateRowSorter(true);
        catagoriaJTable.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        catagoriaJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID CATEGORIA", "NOMBRE CATEGORIA", "CATEGORIA PADRE", "EMPRESA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        catagoriaJTable.setRowHeight(30);
        catagoriaJTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(catagoriaJTable);

        addRowButton.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        addRowButton.setText("NUEVO");
        addRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowButtonActionPerformed(evt);
            }
        });

        saveCategoryButton.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        saveCategoryButton.setText("EDITAR");
        saveCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCategoryButtonActionPerformed(evt);
            }
        });

        eliminarjButton.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        eliminarjButton.setText("ELIMINAR");
        eliminarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 1079, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(addRowButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveCategoryButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(eliminarjButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addRowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveCategoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eliminarjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed

        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_closeButtonActionPerformed

    private void deleteRows(JTable tabla) {

        DefaultTableModel dm = (DefaultTableModel) tabla.getModel();
        int rowCount = dm.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }
    }

    private void saveCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCategoryButtonActionPerformed

        Object objeto = obtenerObjetoSeleccionado(catagoriaJTable, 1);
        
        if (objeto != null) {
            JDialogCategoria dialogModificar = new JDialogCategoria(this, true);
            dialogModificar.setEm(getEm());            
            dialogModificar.setEmpresa(getEmpresa());
            dialogModificar.inicializar();
            dialogModificar.setCategoria((PuntoventaCategoria)objeto);
            dialogModificar.setModoEdicion(true);
            dialogModificar.setLocationRelativeTo(this);
            dialogModificar.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
            dialogModificar.setVisible(true);
            if (!dialogModificar.isCancelado()) {

                deleteRows(catagoriaJTable);
                mostrarCategoriasEnTabla(selectCategoriasEmpresa(getEmpresa()), catagoriaJTable);
            }
        } else {

            mensajeValidacionSeleccion(this);
        }
    }//GEN-LAST:event_saveCategoryButtonActionPerformed


    private void addRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowButtonActionPerformed

        JDialogCategoria dialogNuevo = new JDialogCategoria(this, true);
        dialogNuevo.setEm(getEm());
        dialogNuevo.setEmpresa(getEmpresa());
        dialogNuevo.inicializar();
        dialogNuevo.setLocationRelativeTo(this);
        dialogNuevo.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
        dialogNuevo.setVisible(true);
        if (!dialogNuevo.isCancelado()) {

            deleteRows(catagoriaJTable);
            mostrarCategoriasEnTabla(selectCategoriasEmpresa(getEmpresa()), catagoriaJTable);
        }
    }//GEN-LAST:event_addRowButtonActionPerformed

    private void eliminarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarjButtonActionPerformed
        
        Object objeto = obtenerObjetoSeleccionado(catagoriaJTable, 1);

        if (objeto != null) {
            int respuesta = JOptionPane.showConfirmDialog(
                    this,
                    "¿Desea continuar con la eliminación de esta categoria? "
                    + "No se podrán revertir los cambios una vez confirmado",
                    "Confirmar",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE
            );

            if (respuesta == JOptionPane.YES_OPTION) {

                boolean seElimino = eliminarCategoria((PuntoventaCategoria) objeto);

                if (seElimino) {

                    deleteRows(catagoriaJTable);
                    mostrarCategoriasEnTabla(selectCategoriasEmpresa(getEmpresa()), catagoriaJTable);
                } else {
                    
                    JOptionPane.showMessageDialog(
                            this,
                            "Sucedió un error y no fue posible eliminar la categoria, "
                                    + "intente nuevamente por favor.",
                            "Error", 
                            JOptionPane.ERROR_MESSAGE
                    );
                }
            }
        } else {

            mensajeValidacionSeleccion(this);
        }
    }//GEN-LAST:event_eliminarjButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameCategoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameCategoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameCategoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameCategoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new JFrameCategoria().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRowButton;
    private javax.swing.JTable catagoriaJTable;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton eliminarjButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton saveCategoryButton;
    // End of variables declaration//GEN-END:variables

    private EntityManager em;
    private PuntoventaEmpresa empresa;
    
    public void inicializar() {
        
        mostrarCategoriasEnTabla(selectCategoriasEmpresa(getEmpresa()), catagoriaJTable);
        cambiarFuenteTabla(catagoriaJTable, new Font("Arial", Font.PLAIN, 15));
    }
    
    private void cambiarFuenteTabla(JTable tabla, Font fuente) {

        JTableHeader header = tabla.getTableHeader();
        header.setFont(fuente);
    }
    
    private void mensajeValidacionSeleccion(JFrame frame) {

        JLabel label = new JLabel("Debe seleccionar un objeto de la lista.");
        label.setFont(new Font("Arial", Font.PLAIN, 15));
        JOptionPane.showMessageDialog(frame, label, "Mensaje de validación", JOptionPane.INFORMATION_MESSAGE);
    }
    
    
    private Object obtenerObjetoSeleccionado(JTable tabla, int column) {
        
        int idSelectedRow = -100;
        Object objectoSeleccionado = null;

        try {

            idSelectedRow = tabla.getSelectedRow();
            objectoSeleccionado = tabla.getValueAt(idSelectedRow, column);

        } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
            System.out.println("Debe seleccionar un objeto de la lista: " + idSelectedRow);
        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {
            System.out.println("Debe seleccionar un objeto de la lista: " + idSelectedRow);
        }
        return objectoSeleccionado;
    }
    
    private boolean eliminarCategoria(PuntoventaCategoria categoria) {

        try {
            em.getTransaction().begin();
            
            em.remove(categoria);
            em.getTransaction().commit();
            return true;
        } catch (Exception exception) {

            try {
                em.getTransaction().rollback();
            } catch (Exception exception1) {
                System.out.println("No es posible hacer rollback en este punto");
            }

            System.out.println(exception);


            return false;
        }
    }
    
    private List<PuntoventaCategoria> selectCategoriasEmpresa( PuntoventaEmpresa empresa ){
        
        CriteriaBuilder cb = getEm().getCriteriaBuilder();

        CriteriaQuery<PuntoventaCategoria> cq = cb.createQuery(PuntoventaCategoria.class);
        Root<PuntoventaCategoria> categoriasEmpresa = cq.from(PuntoventaCategoria.class);

        cq.where(cb.equal(categoriasEmpresa.get(PuntoventaCategoria_.idEmpresa), empresa));
        cq.select(categoriasEmpresa);

        TypedQuery<PuntoventaCategoria> q = getEm().createQuery(cq);
    
        List<PuntoventaCategoria> listaItems = q.getResultList();
        return listaItems;
    }
    
    private void mostrarCategoriasEnTabla( List<PuntoventaCategoria> categorias, JTable tabla ){
        
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        
        for (PuntoventaCategoria categoria : categorias) {

            modelo.addRow(new Object[]{
                String.format("%05d",categoria.getIdCategoria()),
                categoria,
                categoria.getIdCategoriaPadre() == null ?
                        "" :
                        categoria.getIdCategoriaPadre().getNombreCategoria(),
                categoria.getIdEmpresa().getNombreEmpresa()
            });
        }
    }
    
    /**
     * @return the empresa
     */
    public PuntoventaEmpresa getEmpresa() {
        return empresa;
    }

    /**
     * @param empresa the empresa to set
     */
    public void setEmpresa(PuntoventaEmpresa empresa) {
        this.empresa = empresa;
    }

    /**
     * @return the em
     */
    public EntityManager getEm() {
        return em;
    }

    /**
     * @param em the em to set
     */
    public void setEm(EntityManager em) {
        this.em = em;
    }

    
}
